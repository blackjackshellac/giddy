
== Giddy

I'm giddy for a client server based backup system written in
[j]?ruby and using http[s]? to communicate between client and
server.

=== Notes:

- use sha1 (configurable) to identify file content
- files and directories are both content (a la git)
- content includes its metadata ([acm]time, uid, gid, etc),
  this allows things like block and character devices,
  fifos, etc to be easily backed and restored
- regular file content could be split into blocks that
  are individually hashed to reduce transfers for huge
  files only some of which have changed.  This is just
  like directories are split into files and other directories,
  except that the blocks have no associated metadata
- should not cross mount points by defaults (--xdev [false])
- similarly content can optionally include xattr/acl info
- each backup set on the server contains only the changed
  files
- after the first backup, all backups are incremental

==== Regex includes and excludes,

$ giddy --include /home/(moe,curly,larry)
$ giddy --exclude '*Cache*'

==== Restores should be dead easy,

$ cd ~/data/project
$ giddy --restore important.file, ...

==== List file versions 

$ giddy --list important.file

==== Backups can be compressed,

$ giddy --config compress [gzip, ...]

==== Backups can be encrypted with one or more gpg keys,

$ giddy --config encrypt gpg:my@email.org
$ giddy --config encrypt gpg:your@email.org

==== Dependencies

- Installed sqlite3 gem on fedora with rubygem-sqlite3 (dnf install rubygem-sqlite3)

